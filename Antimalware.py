import os
import hashlib
from virus_total_apis import PublicApi as VirusTotalPublicApi
from typing import Self
import psutil
import time
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
import scapy.all as scapy

#Base de datos de hashes de malware debes ampliarla con hashes reales.
malware_hashes = {
    "44d88612fea8a8f36de82e1278abb02f" #EJEMPLO
    "e99a18c428cb38d5f260853678922e03" #Ejemplo (EICAR test file)
    }
#Funcion para calcular el hash MD5 de un archivo.
def calcular_hash(archivo):
    hasher = hashlib.md5()
    try:
        with open(archivo, "rb") as f:
            while chunk := f.read(4096):
                hasher.update(chunk)
        return hasher.hexdigest()
    except Exception as e:
        return None

#Escanear archivos en una carpeta.
def escanear_carpeta(ruta):
     print(f"Escaneando: {ruta}")
     for root, _, files in os.walk(ruta):
         for file in files:
             archivo_path = os.path.join(root, file)
             file_hash = calcular_hash(archivo_path)
             if file_hash and file_hash in malware_hashes:
                 print(f"[ALERTA] Malware Detectado: {archivo_path}")

#Monitoreo de procesos sospechosos.
def detectar_procesos():
    procesos_sospechosos = ["keylogger.exe", "trojan.exe", "rat.exe"] #Nombres comunes de malware.
    for proceso in psutil.process_iter(attrs = ['pid', 'name']):
        try:
            if proceso.info['name'].lower() in procesos_sospechosos:
                print(f"[ALERTA] Proceso sospechoso detectado: {proceso.info['name']} (PID: {proceso.info['pid']})")
        except psutil.NoSuchProcess:
            pass
        
#Monitoreo de archivos en tiempo real.
class MonitorArchivos(FileSystemEventHandler):
    def on_created(self, event):
        if not event.is_directory:
            print(f"[MONITOR] Nuevo archivo detectado: {event.src_path}")
            file_hash = calcular_hash(event.src_path)
            if file_hash and file_hash in malware_hashes:
                print(f"[ALERTA] Malware detectado en: {event.src_path}")
                
#Sniffer de red para detectar actividad sospechosa.
def analizar_paquetes(paquete):
    if paquete.haslayer(scapy.TCP) and paquete.haslayer(scapy.Raw):
        payload = paquete[scapy.Raw].load
        palabras_clave = [b"password", b"malware", b"spyware" ] #Palabras clave sospechosas.
        for palabra in payload:
            print(f"[ALERTA] Posible trafico sospechoso detectado: {payload}")

 #$Iniciar el monitoreo.
def iniciar_monitor():
    ruta_a_monitorear = "/ruta/a/monitorear"
    Observer.schedule(Self.event_handler, ruta_a_monitorear, recursive=True)
    Observer.start()

    try:
        while True:
            detectar_procesos()
            time.sleep(10)
            pass 
    except KeyboardInterrupt:
       Observer.stop()
    Observer.join()

#Sniffer de red en tiempo real.
def iniciar_sniffer():
    print("[INFO] Iniciando sniffer de red...")
    scapy.sniff(store = False, prn = analizar_paquetes)

#Ejecutar escaneo manual.
if __name__=="__main__":
    escanear_carpeta("/ruta/s/escaneo")
    iniciar_monitor() #para monitoreo de archivos y procesos.
    # Iniciar_sniffer()  #Descomentar para analizartrafico de red.
    